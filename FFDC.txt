private FieldMapping extractPnsProductCode(MappingConfig config) {
    final String target = acctNumberTransformationConfig.getProductCode();

    for (FieldMapping field : config.getMappedFields()) {
        // 1) Fast path: works for plain object pointers
        try {
            if (field.getCompiledSourcePointer() != null) {
                String property = field.getCompiledSourcePointer().getMatchingProperty();
                if (target.equals(property)) {
                    return field;
                }
            }
        } catch (Exception ignore) {
            // Some compiled pointers (array paths, wildcards) may not support getMatchingProperty()
            // Fall back to parsing the pointer string.
        }

        // 2) Fallback: inspect the pointer string and compare the last token to the target
        String pointer = resolvePointerString(field);
        if (pointer == null) continue;

        String lastToken = lastToken(pointer);
        if (target.equals(lastToken)) {
            return field;
        }
    }
    return null;
}

private String resolvePointerString(FieldMapping field) {
    // Prefer a raw source pointer if your FieldMapping exposes it
    try {
        if (field.getSourcePointer() != null) {
            return field.getSourcePointer();
        }
    } catch (Exception ignore) { }

    // Otherwise use compiled pointer's toString(), which is typically a JSON-pointer-like path
    try {
        if (field.getCompiledSourcePointer() != null) {
            return field.getCompiledSourcePointer().toString();
        }
    } catch (Exception ignore) { }

    return null;
}

/**
 * Extract the last meaningful token from a JSON-pointer-like string.
 * Examples:
 *  "/a/b/c" -> "c"
 *  "/a/b/0/pnsProductCode" -> "pnsProductCode"
 *  "/a/*/pnsProductCode"   -> "pnsProductCode"
 *  "a/b/c"                 -> "c"
 */
private String lastToken(String pointer) {
    if (pointer == null || pointer.isEmpty()) return null;

    String[] parts = pointer.split("/");
    String last = null;
    for (String p : parts) {
        if (p == null || p.isEmpty()) continue;
        last = p;
    }
    if (last == null) return null;

    // If it somehow ends with an array index (rare for field paths), step back one
    if (last.matches("\\d+")) {
        // Find the previous non-empty token
        String prev = null;
        for (int i = parts.length - 2; i >= 0; i--) {
            String p = parts[i];
            if (p != null && !p.isEmpty()) { prev = p; break; }
        }
        last = (prev != null && !prev.matches("\\d+")) ? prev : last;
    }

    // Unescape JSON Pointer tokens
    return last.replace("~1", "/").replace("~0", "~");
}
