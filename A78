@Service
@RequiredArgsConstructor
public class CRRSService {

  private final ObjectMapper mapper;                    // reuse app-wide mapper
  private final AccountDetailsProvider accountProvider; // returns Account Summary as JSON String

  // You already have this extractor; it returns {"cin": "...", "cinSuffix": "..."}
  // Map<String,String> extractCinAndCinSuffix(String holderJson) throws IOException

  public String buildRssJson(CasaAccountSummaryRequest req,
                             HttpHeaders headers,
                             String holderJson) throws IOException {
    String accountJson = accountProvider.getAccountDetailsJson(req, headers);

    Map<String,String> cinMap = extractCinAndCinSuffix(holderJson);
    String cin = cinMap.get("cin");
    String cinSuffix = cinMap.get("cinSuffix");

    return appendCustomerInfo(accountJson, cin, cinSuffix);
  }

  /** Append { "customerInfo": {cin, cinSuffix} } to root.data[] */
  private String appendCustomerInfo(String accountDetailsJson,
                                    String cin,
                                    String cinSuffix) throws IOException {
    JsonNode root = mapper.readTree(accountDetailsJson);
    if (!(root instanceof ObjectNode obj)) {
      throw new IOException("AccountSummary root is not a JSON object");
    }

    // creates the array if missing, or returns it if present
    ArrayNode data = obj.withArray("data");

    if (cin != null && !cin.isEmpty()) {
      ObjectNode wrapper = mapper.createObjectNode();           // element inside data[]
      ObjectNode ci = wrapper.putObject("customerInfo");
      ci.put("cin", cin);
      if (cinSuffix != null && !cinSuffix.isEmpty()) {
        ci.put("cinSuffix", cinSuffix);
      }
      data.add(wrapper); // append at the end (use data.insert(0, wrapper) to put first)
    }

    return mapper.writeValueAsString(root);
  }
}
