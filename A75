@Service
@RequiredArgsConstructor
public class AccountDetailsProvider {

  private final CasaSummaryUtils casaSummaryUtils;
  private final GapiRouterFactory gapiRouterFactory;
  private final ObjectMapper mapper;

  public CasaAccountSummaryResponse getAccountDetails(CasaAccountSummaryRequest req,
                                                      HttpHeaders headers) throws Exception {
    final String routing = casaSummaryUtils.checkRoutingSystem(headers,
        req.getPnsProductCode(), req.getSourceAccountNumber());

    if (isCbtDs(routing)) {
      // --- CBTDS branch (controller uses the *list* API here)
      CasaSummaryRequestList list = new CasaSummaryRequestList();
      list.setCasaAccountSummaryRequestList(List.of(req));

      @SuppressWarnings("unchecked")
      ResponseEntity<String> resp = (ResponseEntity<String>)
          gapiRouterFactory.getCasaSummaryList(com.dbs.c2e.mstd.util.Route.CBTDS)
                           .executeRouter(list, headers);

      // Body is a JSON String like: { "data": [...], "error": [...] }
      Map<String, Object> map = mapper.readValue(resp.getBody(), Map.class);

      List<?> data = (List<?>) map.get("data");
      if (data != null && data.size() == 1) {
        return mapper.convertValue(data.get(0), CasaAccountSummaryResponse.class);
      }

      // propagate a meaningful error if present
      List<?> error = (List<?>) map.get("error");
      throw new IllegalStateException("CBTDS did not return a single data element. error=" + error);
    } else {
      // --- MAINFRAME branch (single summary router)
      @SuppressWarnings("unchecked")
      ResponseEntity<?> resp = (ResponseEntity<?>)
          gapiRouterFactory.getCasaSummary(com.dbs.c2e.mstd.util.Route.MAINFRAME)
                           .executeRouter(req, headers);

      Object body = resp.getBody();
      if (body instanceof CasaAccountSummaryResponse r) {
        return r;
      }
      // often it's a LinkedHashMapâ€”map it to the POJO
      return mapper.convertValue(body, CasaAccountSummaryResponse.class);
    }
  }

  private boolean isCbtDs(String routing) {
    // be tolerant to different representations
    return "CBTDS".equalsIgnoreCase(routing)
        || com.dbs.c2e.mstd.util.Route.CBTDS.name().equalsIgnoreCase(routing)
        || com.dbs.c2e.mstd.util.Route.CBTDS.toString().equalsIgnoreCase(routing);
  }
}
